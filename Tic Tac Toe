
board = {1: ' ', 2: ' ', 3: ' ',
         4: ' ', 5: ' ', 6: ' ',
         7: ' ', 8: ' ', 9: ' '}

def printBoard(board):
    print(board[1] + '|' + board[2] + '|' + board[3])
    print('-+-+-')
    print(board[4] + '|' + board[5] + '|' + board[6])
    print('-+-+-')
    print(board[7] + '|' + board[8] + '|' + board[9])
    print('\n')

def spaceFree(pos):
    return board[pos] == ' '

def checkWin():
    win_combos = [(1,2,3), (4,5,6), (7,8,9),
                  (1,4,7), (2,5,8), (3,6,9),
                  (1,5,9), (3,5,7)]
    for a, b, c in win_combos:
        if board[a] == board[b] == board[c] and board[a] != ' ':
            return True
    return False

def checkMoveForWin(move):
    win_combos = [(1,2,3), (4,5,6), (7,8,9),
                  (1,4,7), (2,5,8), (3,6,9),
                  (1,5,9), (3,5,7)]
    for a, b, c in win_combos:
        if board[a] == board[b] == board[c] == move:
            return True
    return False

def checkDraw():
    return all(board[key] != ' ' for key in board)

def insertLetter(letter, position):
    if spaceFree(position):
        board[position] = letter
        printBoard(board)
        return True
    else:
        print('Position taken. Try again.')
        return False

player = 'O'
bot = 'X'

def playerMove():
    while True:
        try:
            position = int(input('Enter position for O (1-9): '))
            if position in range(1, 10):
                if insertLetter(player, position):
                    break
            else:
                print("Invalid position. Choose 1-9.")
        except ValueError:
            print("Invalid input. Enter a number.")

def compMove():
    bestScore = -1000
    bestMove = 0
    for key in board.keys():
        if board[key] == ' ':
            board[key] = bot
            score = minimax(board, False)
            board[key] = ' '
            if score > bestScore:
                bestScore = score
                bestMove = key
    insertLetter(bot, bestMove)

def minimax(board, isMaximizing):
    if checkMoveForWin(bot):
        return 1
    elif checkMoveForWin(player):
        return -1
    elif checkDraw():
        return 0

    if isMaximizing:
        bestScore = -1000
        for key in board.keys():
            if board[key] == ' ':
                board[key] = bot
                score = minimax(board, False)
                board[key] = ' '
                bestScore = max(score, bestScore)
        return bestScore
    else:
        bestScore = 1000
        for key in board.keys():
            if board[key] == ' ':
                board[key] = player
                score = minimax(board, True)
                board[key] = ' '
                bestScore = min(score, bestScore)
        return bestScore


print("TIC TAC TOE GAME")
printBoard(board)

while True:
    compMove()
    if checkWin():
        print("Bot wins!")
        break
    if checkDraw():
        print("Draw!")
        break

    playerMove()
    if checkWin():
        print("You win!")
        break
    if checkDraw():
        print("Draw!")
        break



TIC TAC TOE GAME
 | | 
-+-+-
 | | 
-+-+-
 | | 


X| | 
-+-+-
 | | 
-+-+-
 | | 


Enter position for O (1-9): 5
X| | 
-+-+-
 |O| 
-+-+-
 | | 


X|X| 
-+-+-
 |O| 
-+-+-
 | | 


Enter position for O (1-9): 3
X|X|O
-+-+-
 |O| 
-+-+-
 | | 


X|X|O
-+-+-
 |O| 
-+-+-
X| | 


Enter position for O (1-9): 4
X|X|O
-+-+-
O|O| 
-+-+-
X| | 


X|X|O
-+-+-
O|O|X
-+-+-
X| | 


Enter position for O (1-9): 8
X|X|O
-+-+-
O|O|X
-+-+-
X|O| 


X|X|O
-+-+-
O|O|X
-+-+-
X|O|X


Draw!
